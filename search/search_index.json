{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastPG","text":"<p>FastPG is a lightweight ORM for FastAPI projects backed by PostgreSQL. It leverages Pydantic models and async database drivers to keep applications fast and easy to maintain.</p>"},{"location":"#installation","title":"Installation","text":"<p>FastPG supports Python 3.9 and newer.</p>"},{"location":"#using-pip","title":"Using pip","text":"<pre><code>pip install git+https://github.com/bepragma-ai/fastpg.git\n</code></pre>"},{"location":"#environment-variables","title":"Environment variables","text":"<p>Set the following optional variables to configure FastPG:</p> <ul> <li><code>FASTPG_TZ</code> \u2013 timezone used for auto timestamp fields (default: <code>UTC</code>)</li> <li><code>POSTGRES_READ_USER</code> - Postgresql read DB user</li> <li><code>POSTGRES_READ_PASSWORD</code> - Postgresql read DB password</li> <li><code>POSTGRES_READ_DB</code> - Postgresql read DB name</li> <li><code>POSTGRES_READ_HOST</code> - Postgresql read DB host</li> <li><code>POSTGRES_READ_PORT</code> - Postgresql read DB port</li> <li><code>POSTGRES_WRITE_USER</code> - Postgresql write DB user</li> <li><code>POSTGRES_WRITE_PASSWORD</code> - Postgresql write DB password</li> <li><code>POSTGRES_WRITE_DB</code> - Postgresql write DB name</li> <li><code>POSTGRES_WRITE_HOST</code> - Postgresql write DB host</li> <li><code>POSTGRES_WRITE_PORT</code> - Postgresql write DB port</li> </ul>"},{"location":"#verify-installation","title":"Verify installation","text":"<pre><code>python -c \"import fastpg; print(fastpg.__version__)\"\n</code></pre>"},{"location":"#quickstart","title":"Quickstart","text":"<p>This quickstart demonstrates defining a model, creating the database tables, performing CRUD operations, and paginating results.</p> <pre><code>from fastpg import DatabaseModel, ASYNC_CUSTOMERS_DB_WRITE\n\nclass Item(DatabaseModel):\n    id: int\n    name: str\n\n    class Meta:\n        db_table = \"items\"\n\nasync def main():\n    # Create a record\n    await ASYNC_CUSTOMERS_DB_WRITE.execute(\n        \"INSERT INTO items(id, name) VALUES (:id, :name)\",\n        {\"id\": 1, \"name\": \"Widget\"},\n    )\n\n    # Query records\n    results = await Item.async_queryset.all()\n    print(results)\n</code></pre>"},{"location":"api/database-models/","title":"Database Models","text":""},{"location":"api/queries/","title":"Queries","text":"<p><code>AsyncQuerySet</code> provides a chainable API for building SQL queries.</p>"},{"location":"api/queries/#retrieving-records","title":"Retrieving records","text":"<pre><code># Get a single record\nawait User.async_queryset.get(id=1)\n\n# Filter multiple records\nusers = await User.async_queryset.filter(age__gte=18)\n</code></pre> <ul> <li><code>__gt</code>, <code>__gte</code>, <code>__lt</code>, <code>__lte</code> \u2013 comparison operators</li> <li><code>__in</code> \u2013 membership, expects a list</li> <li><code>__or</code> \u2013 combine conditions with OR using <code>Q</code> objects</li> </ul>"},{"location":"api/queries/#aggregation","title":"Aggregation","text":"<pre><code>count = await User.async_queryset.filter(active=True).count()\n</code></pre>"},{"location":"api/queries/#updating-and-deleting","title":"Updating and deleting","text":"<pre><code># Update\nawait User.async_queryset.filter(id=1).update(name=\"New\")\n\n# Delete\nawait User.async_queryset.filter(id=1).delete()\n</code></pre>"},{"location":"examples/advanced-usage/","title":"Advanced Usage","text":""},{"location":"examples/basic-usage/","title":"Basic Usage","text":"<pre><code>from fastpg import DatabaseModel, AsyncPaginator\n\nclass Book(DatabaseModel):\n    id: int\n    title: str\n\n    class Meta:\n        db_table = \"books\"\n\n# Create\nawait Book.async_queryset.create(id=1, title=\"1984\")\n\n# Read\nbook = await Book.async_queryset.get(id=1)\n\n# Update\nawait Book.async_queryset.filter(id=1).update(title=\"Animal Farm\")\n\n# Delete\nawait Book.async_queryset.filter(id=1).delete()\n\n# Pagination\npaginator = AsyncPaginator(page_size=10, queryset=Book.async_queryset.all())\npage1 = await paginator.get_page(1)\n</code></pre> <p>Handle errors using built-in exceptions like <code>DoesNotExist</code> and <code>MultipleRecordsFound</code>.</p>"}]}